# -*- coding: utf-8 -*-
"""Task_3_4_Cervical_Cancer_diagnostic_boot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I0hHTM9w9czkDaBZHCpey7kt1HmS4lsV
"""


"""## ***cervecal_cancer diagnostic***"""

"""
import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import pickle

# Read dataset
proc_data = pd.read_csv('cervecal_cancer_dataset.csv')
columns = proc_data.columns
# Scale features betweeen 0-1

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(proc_data)

# Split the data into train and test sets.
train, test = train_test_split(scaled_data)

# Split train and test into features and targets
train = pd.DataFrame(data=train, columns=columns)
X_train = train.drop(['Hinselmann', 'Schiller', 'Citology', 'Biopsy'], axis=1)
Y_train_hinselmann = train['Hinselmann']
Y_train_schiller = train['Schiller']
Y_train_citology = train['Citology']
Y_train_biopsy = train['Biopsy']

test = pd.DataFrame(data=test, columns=columns)
X_test = test.drop(['Hinselmann', 'Schiller', 'Citology', 'Biopsy'], axis=1)
Y_test_hinselmann = test['Hinselmann']
Y_test_schiller = test['Schiller']
Y_test_citology = test['Citology']
Y_test_biopsy = test['Biopsy']

model_hinselmann = SVC(kernel='linear', class_weight={0: 1, 1: 12})
model_schiller = SVC(kernel='linear', class_weight={0: 1, 1: 10})
model_citology = SVC(kernel='linear', class_weight={0: 1, 1: 3})
model_biopsy = SVC(kernel='linear', class_weight={0: 1, 1: 12})

model_hinselmann.fit(X_train, Y_train_hinselmann)
model_schiller.fit(X_train, Y_train_schiller)
model_citology.fit(X_train, Y_train_citology)
model_biopsy.fit(X_train, Y_train_biopsy)

Y_pred_hinselmann = model_hinselmann.predict(X_test)
Y_pred_schiller = model_schiller.predict(X_test)
Y_pred_citology = model_citology.predict(X_test)
Y_pred_biopsy = model_biopsy.predict(X_test)

# Measure accuracy
print('Accuracy Hinselmann={}, f1={}'.format(accuracy_score(Y_test_hinselmann, Y_pred_hinselmann)
											 , f1_score(Y_test_hinselmann, Y_pred_hinselmann)))
print('Accuracy Schiller={}, f1={}'.format(accuracy_score(Y_test_schiller, Y_pred_schiller)
										   , f1_score(Y_test_schiller, Y_pred_schiller)))
print('Accuracy Citoloy={}, f1={}'.format(accuracy_score(Y_test_citology, Y_pred_citology)
										  , f1_score(Y_test_citology, Y_pred_citology)))
print('Accuracy Biopsy={}, f1={}'.format(accuracy_score(Y_test_biopsy, Y_pred_biopsy)
										 , f1_score(Y_test_biopsy, Y_pred_biopsy)))

"""
import pickle
#=============================================
# loaded_model = pickle.load(open(filename, 'rb'))
try:
    filename_f_hinselmann = './Tache3_make_prediction/D_Cervecal_cancer_prediction/Model_1_Cancer_model_hins.sav'
    model_hinselmann = pickle.load(open(filename_f_hinselmann, 'rb'))
    #=============================================
    #=============================================
    filename_f_schiller = './Tache3_make_prediction/D_Cervecal_cancer_prediction/Model_1_Cancer_model_sch.sav'
    model_schiller = pickle.load(open(filename_f_schiller, 'rb'))
    #=============================================
    #=============================================
    filename_f_citology= './Tache3_make_prediction/D_Cervecal_cancer_prediction/Model_1_Cancer_model_cit.sav'
    model_citology = pickle.load(open(filename_f_citology, 'rb'))
    #=============================================
    #=============================================
    filename_f_biopsy = './Tache3_make_prediction/D_Cervecal_cancer_prediction/Model_1_Cancer_model_bio.sav'
    model_biopsy = pickle.load(open(filename_f_biopsy, 'rb'))
    #=============================================
    #=============================================
    # loaded_model = pickle.load(open(filename, 'rb'))
    
    f_SCALER = './Tache3_make_prediction/D_Cervecal_cancer_prediction/scaler_data_ceveral_cancer.sav'
    scaler = pickle.load(open(f_SCALER, 'rb'))
    #=============================================
except:
    filename_f_hinselmann = './D_Cervecal_cancer_prediction/Model_1_Cancer_model_hins.sav'
    model_hinselmann = pickle.load(open(filename_f_hinselmann, 'rb'))
    #=============================================
    #=============================================
    filename_f_schiller = './D_Cervecal_cancer_prediction/Model_1_Cancer_model_sch.sav'
    model_schiller = pickle.load(open(filename_f_schiller, 'rb'))
    #=============================================
    #=============================================
    filename_f_citology= './D_Cervecal_cancer_prediction/Model_1_Cancer_model_cit.sav'
    model_citology = pickle.load(open(filename_f_citology, 'rb'))
    #=============================================
    #=============================================
    filename_f_biopsy = './D_Cervecal_cancer_prediction/Model_1_Cancer_model_bio.sav'
    model_biopsy = pickle.load(open(filename_f_biopsy, 'rb'))
    #=============================================
    #=============================================
    # loaded_model = pickle.load(open(filename, 'rb'))
    
    f_SCALER = './D_Cervecal_cancer_prediction/scaler_data_ceveral_cancer.sav'
    scaler = pickle.load(open(f_SCALER, 'rb'))
    #=============================================    



def get_info_Continuous(text , subject):
  print(text)
  while True:
    try:
      variable_intered=float(input(""))
      break
    except:
        print("Can you please Enter a valid ",subject)
  
  return variable_intered

def crevical_cancer_disease_Bot():  

  flage =True
  while flage:
    print("hello please anter the folowing mesearmunt in order \n to predict the probability of you develepong a cevercal cancer based on your life style habits  \n")
    print("enter Yes to contunious the prisougre and No to close \n ")
    continu_pres=""
    while True:
      continu_pres=input("desicion :  ")
      continu_pres=continu_pres.lower()
      if (continu_pres=="no" or continu_pres=="yes"):
        break
      else:
        print("Please inter a valide answer \n ")

    if (continu_pres=="no"):
      break
 
      # Age	
      # Number of sexual partners,nbSeP
      # First sexual intercourse ,Firstexp
      # Num of pregnancies
      # STDs: Number of diagnosis ,
    	# Dx:CIN	
      # Dx:HPV
    user_Age=get_info_Continuous("please enter your age  \n" ,"Age")
    user_nbSeP=get_info_Continuous("Oky ,no shy and no lie lol , telle me the Number of sexual partners  \n"," partners number  ")
    user_Firstexp=get_info_Continuous("please tell me the  First sexual intercourse how old you were  \n" ,"First experience Age")
    user_Pregnancies=get_info_Continuous("please tell me number of Pregnancies if your a male just write 0  \n","Pregnancies level")
    user_STDs=get_info_Continuous("please telle me the  Number of STDs diagnosis you have done  \n","STDs diagnosis number")
    user_CIN=get_info_Continuous("What about the diagnosis with CIN  \n","CIN diagnosis Number")
    user_HPV=get_info_Continuous("last question ,Number of diagnosis with HPV  \n","HPV diagnosis Number")


    flage = False
    test_user_valid=[[user_Age , user_nbSeP , user_Firstexp , user_Pregnancies , user_STDs , user_CIN ,user_HPV ,0,	0,	0,	0]]
    test_user_valid = scaler.transform(test_user_valid)
    
    test_user_valid=test_user_valid.reshape(11,1)
    test_user_valid =test_user_valid[:7].reshape(1,7)


    Y_pred_hinselmann = model_hinselmann.predict(test_user_valid)
    Y_pred_schiller = model_schiller.predict(test_user_valid)
    Y_pred_citology = model_citology.predict(test_user_valid)
    Y_pred_biopsy = model_biopsy.predict(test_user_valid)

    from collections import Counter
    c = Counter((Y_pred_hinselmann[0],Y_pred_schiller[0],	Y_pred_citology[0],	Y_pred_biopsy[0]))
    Hd_prediction, count = c.most_common()[0]
    
    if Hd_prediction==1:
      print("Based on the model your are in the average of developing a ceverecal Cancer but you should visit your doctar to check .")
    else: 
      print("with ur current info , you wont have a cevrecal cancer  but try to stay healthy")

def Run_CervicalCancer_disease_Bot():
  while True:
    crevical_cancer_disease_Bot()
    print("would you like to do the diagnostic again enter  Yes / No  \n")
    answ=""
    while True:
      answ=input("")
      answ=answ.lower()
      if (answ=="yes" or answ=="no"):
        break
      else:
        print("Please enter a valide answer")
    if answ=="no":
      break

